%YAML:1.0

imu_topic: "/imu/imu_mod"

#camera calibration 
model_type:  PINHOLE
camera_name: camera

image_width:  752
image_height: 480
# NTU VIRAL datasets
distortion_parameters:
   k1: -0.300267420221178
   k2:  0.090544063693053
   p1:  3.330220891093334e-05
   p2:  8.989607188457415e-05
projection_parameters:
   fx: 4.313364265799752e+02
   fy: 4.327527965378035e+02
   cx: 3.548956286992647e+02
   cy: 2.325508916495161e+02

# Extrinsic parameter between IMU and Camera.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.01916508, -0.01496218,  0.99970437,
          -0.99974371, -0.01176483, -0.01934191,
           0.01205075, -0.99981884, -0.01473287]

#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [0.07494282, -0.01077138, -0.00641822]
   data: [0.00519443, -0.1347802, -0.01465067]
   
#feature traker paprameters
max_cnt:  150           # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 10.0  # max solver itration time (ms), to guarantee real time
max_num_iterations: 4  # max solver itrations, to guarantee real time
keyframe_parallax: 10  # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1             # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01            # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.001           # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5          # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805          # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure

#unsynchronization parameters
estimate_td: 1                     # online estimate time offset between camera and imu
td: 0.00                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                 # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033          # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                      # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0           # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4         # size of camera marker in RVIZ